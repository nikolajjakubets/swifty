swagger: '2.0'
info:
  version: 1.0.0
  title: admd api
host: 'localhost:8687'
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /login:
    post:
      summary: Sign-in request
      parameters:
        - in: body
          name: data
          description: Credentials
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        '200':
          description: OK
          headers:
            X-Subject-Token:
              type: string
              description: Auth token for further requests
          schema:
            $ref: '#/definitions/UserToken'
        '400':
          description: Something went wrong
        '401':
          description: Bad username/pass
  /users:
    get:
      summary: List users
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/UserInfo'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
    post:
      summary: Add new user (admin or UI)
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: User description
          required: true
          schema:
            $ref: '#/definitions/UserAdd'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
  /users/{uid}:
    parameters:
      - in: path
        name: uid
        type: string
        required: true
        description: User ID (id, not uid)
    get:
      summary: Show user info by ID (admin or self)
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
    delete:
      summary: Del existing user (admin or self)
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
      responses:
        '204':
          description: OK
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
  /setpass:
    post:
      summary: Set user password (admin or self)
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: User description (username may be empty for self)
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        '201':
          description: OK
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
  /limits/set:
    post:
      summary: Set tariff plan parameters
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: User ID and parameters
          schema:
            $ref: '#/definitions/UserLimits'
      responses:
        '201':
          description: OK
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token (needs admin role)
  /limits/get:
    post:
      summary: Get tariff plan parameters
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: User ID and parameters
          schema:
            $ref: '#/definitions/UserInfo'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/UserLimits'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token (needs admin role)
definitions:
  UserLogin:
    required:
      - password
    properties:
      username:
        type: string
        example: john@doe.com
      password:
        type: string
        example: secretpass123
  UserToken:
    properties:
      expires:
        type: string
        description: UnixDate time of Token expiration
      endpoint:
        type: string
        description: Gate address:port to talk to
  UserInfo:
    properties:
      id:
        type: string
        example: 192a30bc93e2184dac03294f89840324
      uid:
        type: string
        example: john@doe.com
      name:
        type: string
        example: John Doe
      created:
        type: string
        description: Time of user creation (RFC1123Z format)
      roles:
        type: array
        items:
          type: string
  UserAdd:
    required:
      - uid
      - pass
    properties:
      uid:
        type: string
        example: john@doe.com
      pass:
        type: string
        example: pAs$w0rd
      name:
        type: string
        example: John Doe
      planid:
        type: string
        description: ID of a tariff plan. If set, user limits will be set creation-time into tariff values.
  UserLimits:
    properties:
      id:
        type: string
        description: User ID (empty for /get call)
      planid:
        type: string
        description: Tariff plan name
      function:
        $ref: '#/definitions/FunctionLimits'
  FunctionLimits:
    description: Limits for functions invocations
    properties:
      rate:
        type: integer
        description: max calls per second
      burst:
        type: integer
        description: rate-limiter burst value
      maxinproj:
        type: integer
        description: maximum number of functions in a single project
      gbs:
        type: integer
        description: maximum GBS value per billing period
      bytesout:
        type: integer
        description: maximum bytes-out (outgoing network traffic) value per billing period
      planid:
        type: string
        description: Description of the tarif plan used. During set the uninitialized above fields are copied from the tariff plan's defaults. If tariff plan doesn't exist, this value is just saved for the user.
