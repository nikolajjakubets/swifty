swagger: '2.0'
info:
  version: 1.0.0
  title: gate api
host: 'localhost:8686'
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /login:
    post:
      summary: Sign-in request
      parameters:
        - in: body
          name: data
          description: Credentials
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        '200':
          description: OK
          headers:
            X-Subject-Token:
              type: string
              description: Auth token for further requests
          schema:
            $ref: '#/definitions/UserToken'
        '400':
          description: Something went wrong
        '401':
          description: Bad username/pass
          
  /stats:
    post:
      summary: Show user statistics
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: date
          in: body
          description: Function name
          required: true
          schema:
            $ref: '#/definitions/UserStatsReq'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserStatsResp'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
          
  /project/list:
    post:
      summary: List projects
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            properties:
              functions:
                type: array
                items:
                  $ref: '#/definitions/ProjectItem'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /project/del:
    post:
      summary: Delete project and all functoins and mwares in it
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: Project removal options
          required: true
          schema:
            $ref: '#/definitions/ProjectDel'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  
  /function/list:
    post:
      summary: List functions
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: List parameters
          required: true
          schema:
            $ref: '#/definitions/FunctionList'
      responses:
        '200':
          description: OK
          schema:
            properties:
              functions:
                type: array
                items:
                  $ref: '#/definitions/FunctionItem'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token

  /function/list/info:
    post:
      summary: List functions and provide info for each
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: List parameters
          required: true
          schema:
            $ref: '#/definitions/FunctionListInfo'
      responses:
        '200':
          description: OK
          schema:
            properties:
              functions:
                type: array
                items:
                  $ref: '#/definitions/FunctionInfo'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/add:
    post:
      summary: Add a function
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Function specification
          required: true
          schema:
            $ref: '#/definitions/FunctionAdd'
      responses:
        '200':
          description: Function added
        '400':
          description: Some error occurred
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/update:
    post:
      summary: Update function code and/or properties
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Update description
          required: true
          schema:
            $ref: '#/definitions/FunctionUpdate'
      responses:
        '200':
          description: Function updated
        '400':
          description: Something went wrong
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/wait:
    post:
      summary: Wait for an event on a function
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Event to wait
          required: true
          schema:
            $ref: '#/definitions/FunctionWait'
      responses:
        '200':
          description: Event occurred
        '400':
          description: Something went wrong
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
        '524':
          description: Timout while waiting for event
  /function/remove:
    post:
      summary: Remove a function
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Function to remove
          required: true
          schema:
            $ref: '#/definitions/FunctionRemove'
      responses:
        '200':
          description: Function removed
        '400':
          description: Something went wrong
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/run:
    post:
      summary: Manual execution trigger
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Function ID and arguments
          required: false
          schema:
            $ref: '#/definitions/FunctionRun'
      responses:
        '200':
          description: Function run result
          schema:
            $ref: '#/definitions/FunctionRunResult'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/logs:
    post:
      summary: Show logs of a function
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Function name to see logs for
          required: true
          schema:
            $ref: '#/definitions/FunctionID'
      responses:
        '200':
          description: OK
          schema:
            properties:
              logs:
                type: array
                items:
                  $ref: '#/definitions/FunctionLogEntry'
        '400':
          description: Something went wrong
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/info:
    post:
      summary: Show extended info about a function
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: date
          in: body
          description: Function name
          required: true
          schema:
            $ref: '#/definitions/FunctionInfoReq'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FunctionInfo'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/stats:
    post:
      summary: Show function statistics
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: date
          in: body
          description: Function name
          required: true
          schema:
            $ref: '#/definitions/FunctionStatsReq'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FunctionStatsResp'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/code:
    post:
      summary: Show function code
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: date
          in: body
          description: Function name
          required: true
          schema:
            $ref: '#/definitions/FunctionXID'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FunctionSources'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/state:
    post:
      summary: Set specific function state
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: date
          in: body
          description: Function name and state
          required: true
          schema:
            $ref: '#/definitions/FunctionState'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/{id}/events:
    parameters:
      - in: path
        name: id
        description: Funciton ID
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        type: string
        required: true
    get:
      tags:
        - triggers
      summary: List event triggers for the function
      responses:
        '200':
          description: OK
          schema:
              type: array
              items:
                $ref: '#/definitions/FunctionEvent'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
    put:
      tags:
        - triggers
      summary: Add event trigger for the function
      parameters:
        - name: data
          in: body
          description: Event trigger description (without ID)
          required: true
          schema:
            $ref: '#/definitions/FunctionEvent'
      responses:
        '200':
          description: OK
          schema:
            type: string
            description: ID of a newly created event trigger
            example: 'deadbeef'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /function/{id}/events/{eid}:
    parameters:
      - in: path
        name: id
        description: Funciton ID
        required: true
        type: string
      - in: path
        name: eid
        description: Event trigger ID
        required: true
        type: string
      - in: header
        name: X-Auth-Token
        type: string
        required: true
    get:
      tags:
        - triggers
      summary: Get event trigger details
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FunctionEvent'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
    delete:
      tags:
        - triggers
      summary: Remove event trigger
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /mware/list:
    post:
      summary: List middleware
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: List parameters
          required: true
          schema:
            $ref: '#/definitions/MwareList'
      responses:
        '200':
          description: OK
          schema:
            properties:
              mware:
                type: array
                items:
                  $ref: '#/definitions/MwareItem'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /mware/list/info:
    post:
      summary: List mwares and provide info for each
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: List parameters
          required: true
          schema:
            $ref: '#/definitions/MwareList'
      responses:
        '200':
          description: OK
          schema:
            properties:
              functions:
                type: array
                items:
                  $ref: '#/definitions/MwareInfo'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /mware/add:
    post:
      summary: Add middleware
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Middleware specification
          required: true
          schema:
            $ref: '#/definitions/MwareAdd'
      responses:
        '200':
          description: Middleware added
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /mware/info:
    post:
      summary: Show information about middleware
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Middleware to inspect
          required: true
          schema:
            $ref: '#/definitions/MwareID'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MwareInfo'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /mware/access/s3:
    post:
      summary: Request keys for S3 access
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Middleware to remove
          required: true
          schema:
            $ref: '#/definitions/MwareS3Access'
      responses:
        '200':
          description: Middleware removed
          schema:
            $ref: '#/definitions/MwareS3Creds'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /mware/remove:
    post:
      summary: Remove middleware
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Middleware to remove
          required: true
          schema:
            $ref: '#/definitions/MwareRemove'
      responses:
        '200':
          description: Middleware removed
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /deploy/start:
    post:
      summary: Start deploying set of functions and middleware
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Middleware to remove
          required: true
          schema:
            $ref: '#/definitions/DeployStart'
      responses:
        '200':
          description: All objects has been /add-ed
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /deploy/stop:
    post:
      summary: Start demolishing previously deployed items
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Middleware to remove
          required: true
          schema:
            $ref: '#/definitions/DeployId'
      responses:
        '200':
          description: All objects has been /remove-ed
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /deploy/info:
    post:
      summary: Get info about deployment
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - name: data
          in: body
          description: Middleware to remove
          required: true
          schema:
            $ref: '#/definitions/DeployId'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DeployInfo'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /info/langs:
    post:
      summary: Show supported languages
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            properties:
              langs:
                type: array
                items:
                  type: string
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
  /info/mwares:
    post:
      summary: Show supported mware types
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            properties:
              mwares:
                type: array
                items:
                  type: string
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/GateError'
        '401':
          description: Need to authenticate
        '403':
          description: Bad authentication token
definitions:
  UserLogin:
    required:
      - username
      - password
    properties:
      username:
        type: string
        example: john@doe.com
      password:
        type: string
        example: secretpass123
  UserToken:
    properties:
      expires:
        type: string
        description: UnixDate time of Token expiration
      endpoint:
        type: string
        description: Gate addr:port to talk to further
  GateError:
    properties:
      code:
        type: integer
        description: Error code
      message:
        type: string
        description: Error text
  ProjectItem:
    properties:
      project:
        type: string
        example: my-project
  ProjectDel:
    required:
      - project
    properties:
      project:
        type: string
        example: my-project
  FunctionList:
    properties:
      project:
        type: string
        example: my-project
  FunctionListInfo:
    properties:
      project:
        type: string
        example: my-project
      periods:
        type: integer
        description: Numer of stats periods, see FunctionStatsReq for details
  FunctionInfo:
    properties:
      id:
        type: string
        description: Unique ID, system-wide
      name:
        type: string
        description: Function name (reported for /list/info operation)
      state:
        type: string
        description: Function state
        example: ready
      version:
        type: string
        description: Function code version
        example: 0
      url:
        type: string
        description: URL for direct calls if event.source is "url"
        example: "/call/ki4r4380984csdlsiduo9049843jk"
      code:
        $ref: '#/definitions/FunctionCode'
      size:
        $ref: '#/definitions/FunctionSize'
      stats:
        type: array
        description: Per-period statistics, see FunctionStatsResp for details
        items:
          $ref: '#/definitions/FunctionStats'
      authctx:
        type: string
        description: ID of auth mware that must authorize the caller before running FN
      userdata:
        type: string
        description: The data provided during /add call
      mware:
        type: array
        items:
          type: string
          example:
            - mymariadb
              mys3strg
      s3buckets:
        type: array
        items:
          type: string
          example:
            - foobucket
              barbucket
  FunctionStatsReq:
    type: object
    description: Request for FN statistics
    properties:
      project:
        type: string
      name:
        type: string
        description: Function name
      periods:
        type: integer
        description: Numer of periods back to request (default 0), the top-most stat will be "till now"
  UserStatsReq:
    type: object
    description: Request for user statistics
    properties:
      periods:
        type: integer
        description: Numer of periods back to request (default 0), the top-most stat will be "till now"
  FunctionStatsResp:
    type: object
    description: Responce with FN stats
    properties:
      stats:
        type: array
        description: Per-period statistics, "till"-sorted descending. Each period is incremental to previous. The 0th one is "till now"
        items:
          $ref: '#/definitions/FunctionStats'
  UserStatsResp:
    type: object
    description: Responce with user stats
    properties:
      stats:
        type: array
        description: Per-period statistics, "till"-sorted descending. Each period is incremental to previous. The 0th one is "till now"
        items:
          $ref: '#/definitions/UserStats'
  FunctionState:
    type: object
    description: Function name and state to set
    required:
      - name
      - state
    properties:
      project:
        type: string
      name:
        type: string
      state:
        type: string
        description: Values reported by /function/info in state field. To (de)activate use "deactivated" and "ready" respectively
  FunctionStats:
    type: object
    description: Statistics about function
    properties:
      called:
        type: integer
        description: Number of funciton invovations so far
        example: 42
      timeouts:
        type: integer
        description: Number of timeouts (included in called)
      errors:
        type: integer
        description: Number of fn run errors (included in called)
      lastcall:
        type: string
        description: Time or last call in RFC1123Z format
        example: 'Mon Dec 25 14:18:18 MSK 2017'
      time:
        type: integer
        description: Total time spent in function code (in microseconds)
        example: 123000
      gbs:
        type: number
        description: Mem*time consumed so far, in GB * sec
      bytesout:
        type: integer
        description: Total size of JSON objects returned from function
      till:
        type: string
        description: Time (RFC1123Z) till which stats are collected (if empty means "till now")
      from:
        type: string
        description: Time (RFC1123Z) from which stats are collected (if empty means "till tenant creation time")
  UserStats:
    type: object
    description: Statistics about user
    properties:
      called:
        type: integer
        description: Number of all funcitons invocations so far
        example: 42
      gbs:
        type: number
        description: Mem*time consumed so far, in GB * sec
      bytesout:
        type: integer
        description: Total size of JSON objects returned from all user functions
      till:
        type: string
        description: Time (RFC1123Z) till which stats are collected (if empty means "till now")
      from:
        type: string
        description: Time (RFC1123Z) from which stats are collected (if empty means "till tenant creation time")
  FunctionWait:
    type: object
    description: What to wait on a function
    required:
      - name
      - timeout
    properties:
      project:
        type: string
      name:
        type: string
        description: Function name
      timeout:
        type: integer
        description: Timtout on milliseconds
        example: '1000'
      version:
        type: string
        example: '42'
        description: >-
          When a function version equals or (!) greater than this becomes
          available for execution, the event occurs. Note, that older versions
          may still be there when the event happens.
  FunctionEventCron:
    type: object
    description: Cron string and arguments
    required:
      - tab
      - args
    properties:
      tab:
        type: string
        description: Cron string in classical notation
        example: '* * * * * *'
      args:
        type: object
        description: Dict with args to pass to FN when this cron fires
        additionalProperties:
          type: string
        example:
          - arg: value
  FunctionEventS3:
    type: object
    description: Bucket to receive envets from
    required:
      - bucket
      - ops
    properties:
      bucket:
        type: string
        description: 'Bucket name in S3'
      ops:
        type: string
        description: 'Comma-separated list of operations'
        example: 'put'
  FunctionEvent:
    type: object
    description: Event specification
    required:
      - name
      - source
    properties:
      id:
        type: string
        description: Used in responces
      name:
        type: string
      source:
        type: string
        description: 'Event source type, supported by platform'
        example: 'url, cron, s3'
      cron:
        $ref: '#/definitions/FunctionEventCron'
      s3:
        $ref: '#/definitions/FunctionEventS3'
  FunctionSources:
    type: object
    description: Sources description
    required:
      - type
    properties:
      type:
        type: string
        description: Sources type ("code")
        example: code
      code:
        type: string
        description: Base64 encoded source file
        example: 'cHJpbnQoIkhlbGxvIHdvcmxkIikK'
  FunctionCode:
    type: object
    description: Code description
    required:
      - lang
    properties:
      lang:
        type: string
        description: 'Language ("python", "golang", ...)'
        example: python
      env:
        type: array
        items:
          type: string
          example: FOO=bar
  FunctionSize:
    type: object
    description: Function runtime size specification
    properties:
      memory:
        type: integer
        description: size in megabytes
        example: 128
      timeout:
        type: integer
        description: timeout in milliseconds
        example: 10
      rate:
        type: integer
        description: max calls per second
        example: 100
      burst:
        type: integer
        description: rate-limiter burst value
        example: 10
  FunctionAdd:
    required:
      - name
      - sources
      - code
    properties:
      project:
        type: string
        example: my-project
      name:
        type: string
        example: my-function
      userdata:
        type: string
        description: And string user wishes to keep with this FN
      authctx:
        type: string
        description: ID of auth mware
      sources:
        $ref: '#/definitions/FunctionSources'
      code:
        $ref: '#/definitions/FunctionCode'
      size:
        $ref: '#/definitions/FunctionSize'
      mware:
        type: array
        items:
          type: string
          example: mymariadb
      s3buckets:
        type: array
        items:
          type: string
          example: foobucket
  FunctionUpdate:
    required:
      - name
    properties:
      project:
        type: string
        example: my-project
      name:
        type: string
        example: my-function
      code:
        type: string
        description: Base64 encoded source file
        example: 'cHJpbnQoIkhlbGxvIHdvcmxkIikK'
      size:
        $ref: '#/definitions/FunctionSize'
      userdata:
        type: string
        description: And string user wishes to keep with this FN
      authctx:
        type: string
        description: ID of auth mware. If empty, the FN becomes unauthorized
      mware:
        type: array
        description: 'No value means "leave as is", any other value, even empty list, means "set to this"'
        items:
          type: string
          example: mymariadb
      s3buckets:
        type: array
        description: 'Works same as mware does'
        items:
          type: string
          example: foobucket
  FunctionRemove:
    required:
      - name
    properties:
      project:
        type: string
        example: my-project
      name:
        type: string
        example: my-function
  FunctionID:
    required:
      - name
    properties:
      project:
        type: string
        example: my-project
      name:
        type: string
        example: my-function
  FunctionInfoReq:
    required:
      - name
    properties:
      project:
        type: string
        example: my-project
      name:
        type: string
        example: my-function
      periods:
        type: integer
        description: Numer of stats periods, see FunctionStatsReq for details
  FunctionXID:
    required:
      - name
      - version
    properties:
      project:
        type: string
        example: my-project
      name:
        type: string
        example: my-function
      version:
        type: string
        example: 0
  FunctionItem:
    properties:
      name:
        type: string
        example: my-function
      state:
        type: string
        example: ready
        description: function state description
      timeout:
        type: integer
        example: 10
        description: timeout in msec
  FunctionLogEntry:
    description: Entry in function logs
    properties:
      event:
        type: string
        description: Event name
        example: "run"
      ts:
        type: string
        description: Timestamp in UnixDate format
      text:
        type: string
        description: Log entry text (stdout and stderr typically)
  FunctionRun:
    description: Function ID and arguments
    required:
      - name
    properties:
      project:
        type: string
        example: my-project
      name:
        type: string
        example: my-function
      args:
        type: object
        description: Dict with arguments
        additionalProperties:
          type: string
        example:
          - foo: bar
            baz: fuz
  FunctionRunResult:
    required:
      - code
      - return
    properties:
      code:
        type: integer
        description: Result of the execution (0 == all went OK)
      return:
        type: string
        description: JSON-encoded function return object
        example: {"message": "hello, world"}
      stdout:
        type: string
        description: String with stdout captured while running
      stderr:
        type: string
        description: String with stderr captured while running
  MwareItem:
    type: object
    description: Middleware item description
    required:
      - id
      - type
    properties:
      id:
        type: string
        description: Middleware id
        example: mymariadb
      type:
        type: string
        description: Type of middleware
        example: maria
  MwareAdd:
    type: object
    description: Middleware specification
    required:
      - id
      - type
    properties:
      project:
        type: string
        example: my-project
      id:
        type: string
        description: Just an identifier
        example: mymariadb
      type:
        type: string
        description: Middleware type
        example: maria
      userdata:
        type: string
        description: And string user wishes to keep with this mware
  MwareID:
    type: object
    description: Middleware ID
    required:
      - id
    properties:
      project:
        type: string
        example: my-project
      id:
        type: string
        description: Just an identifier
        example: mymariadb
  MwareInfo:
    type: object
    description: Middleware inforamtion
    properties:
      id:
        type: string
        description: Mware ID (reported for /list/info operation)
      type:
        type: string
        description: Middleware type
        example: maria
      userdata:
        type: string
        description: String provided during /add call
      disk_usage:
        type: integer
        description: Disk usage in KBytes
  MwareS3Access:
    type: object
    description: Description of the access requested
    properties:
      project:
        type: string
      bucket:
        type: string
        description: if empty, access to "the whole s3" within the project is requested
      lifetime:
        type: integer
        description: Key validity period in seconds
      access:
        type: array
        description: List of options. The "hidden" one is to be set for keys that are not planned to be shown to user (e.g. -- used by UI for itself).
        items:
          type: string
          example: hidden
  MwareS3Creds:
    type: object
    description: Keys to access S3
    properties:
      endpoint:
        type: string
        description: Addr:Port pair to talk S3 protocol to
      key:
        type: string
      secret:
        type: string
      expires:
        type: integer
        description: Lifetime in seconds
  MwareRemove:
    type: object
    description: Middleware specification
    required:
      - id
    properties:
      project:
        type: string
        example: my-project
      id:
        type: string
        description: Just an identifier
        example: mymariadb
  MwareList:
    properties:
      project:
        type: string
        example: my-project
  DeployId:
    type: object
    description: ID of an item
    required:
      - name
    properties:
      project:
        type: string
      name:
        type: string
  DeployItem:
    type: object
    description: Item to deploy (function or middleware)
    properties:
      function:
        $ref: '#/definitions/FunctionAdd'
      mware:
        $ref: '#/definitions/MwareAdd'
  DeployStart:
    type: object
    description: Description of deployment
    required:
      - name
      - items
    properties:
      project:
        type: string
      name:
        type: string
      items:
        type: array
        items:
          $ref: '#/definitions/DeployItem'
  DeployItemInfo:
    type: object
    description: Info about a deploy item
    properties:
      type:
        type: string
        description: Item type, "function" or "middleware"
      name:
        type: string
      state:
        type: string
        description: Item state, "ready", "dead" or other. See function/mware states for details
  DeployInfo:
    type: object
    description: Info about deployment
    properties:
      state:
        type: string
        description: State of deploying -- "starting", "ready", "stalled" or "terminating"
      items:
        type: array
        items:
          $ref: '#/definitions/DeployItemInfo'
