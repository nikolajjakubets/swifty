.PHONY: all .FORCE
.DEFAULT_GOAL := all

include Makefile.inc
include Makefile.versions

# Build daemon
define gen-gobuild
swy-$(1): $$(go-$(1)-y) .FORCE
	$$(call msg-gen,$$@)
	$$(Q) $$(GO) $$(GO-BUILD-OPTS) -o $$@ $$(go-$(1)-y)
all-y += swy-$(1)
endef

# Build service daemon
define gen-gobuild-daemon
src/$(1)/version.go: .FORCE
	$$(call msg-gen, $$@)
	$$(Q) echo '// Autogenerated'					>  $$@
	$$(Q) echo 'package main' 					>> $$@
	$$(Q) echo 'var Version string = "$(GITID)"'			>> $$@
	$$(Q) echo 'var Flavor string = "$(FLAVOR)"'			>> $$@

swy-$(1): .FORCE src/$(1)/version.go
	$$(call msg-gen,$$@)
	$$(Q) cd src/$(1)/ && $$(GO-BUILD)
	$$(Q) $$(MV) src/$(1)/$(1) $$@
all-y += swy-$(1)
endef

TOOL_BINS =

# Build tool
define gen-gobuild-tool
TOOL_BINS += swy$(1)

swy$(1): $$(go-$(1)-y) .FORCE
	$$(call msg-gen,$$@)
	$$(Q) $$(GO-BUILD) -o $$@ $$(go-$(1)-y)
all-y += swy$(1)
endef

go-pgrest-y	+= src/pgrest/main.go
go-mquotad-y	+= src/mquotad/main.go

TOLVER = src/tools/version.go

$(TOLVER): .FORCE
	$(call msg-gen, $@)
	$(Q) echo '// Autogenerated'					>  $@
	$(Q) echo 'package main' 					>> $@
	$(Q) echo 'var Version string = "$(GITID)"'			>> $@

go-ctl-y	+= src/tools/ctl.go $(TOLVER)
go-trace-y	+= src/tools/tracer.go
go-s3fsck-y	+= src/tools/s3-fsck.go
go-sg-y		+= src/tools/sg.go
go-dbscr-y	+= src/tools/scraper.go
go-dbscr-s3-y	+= src/tools/scraper-s3.go
go-runtest-y	+= src/tools/runner-tester.go

#$(eval $(call gen-gobuild,pgrest))
#$(eval $(call gen-gobuild,mquotad))

#
# Docker lang images
#
IMAGES =

define gen-lang
IMAGES += swifty/$(1)
swifty/$(1): swy-wdog swy-runner kubectl/docker/wdog/$(1)/Dockerfile

swifty/$(1):
	$$(call msg-gen, $$@)
	$$(Q) $$(MAKE) -C kubectl/docker/wdog/$(1) all

.PHONY: swifty/$(1)
endef

swifty/python: src/wdog/runner/runner.py
swifty/golang: src/wdog/runner/runner.go go-sca
swifty/swift: src/wdog/runner/runner.swift
swifty/csharp: src/wdog/runner/runner.cs src/wdog/lib/XStream.dll
swifty/nodejs: src/wdog/runner/runner.js
swifty/ruby: src/wdog/runner/runner.rb

src/wdog/lib/XStream.dll: src/wdog/lib/XStream.cs
	$(call msg-gen,$@)
	$(Q) $(DOCKER) -v $(CURDIR)/src/wdog/lib/:/mono mono csc /mono/XStream.cs -out:/mono/XStream.dll -target:library -r:Mono.Posix.dll -unsafe

swy-runner: src/wdog/runner/runner.c
	$(call msg-gen,$@)
	$(Q) $(CC) -Wall -Werror -O2 -static -o $@ $<

go-sca: src/tools/go-sca.go
	$(call msg-gen,$@)
	go build $<

#
# Services
#
S_IMAGES =
S_BINARIES =

define gen-pack-service-n
swifty/$(1): swy$(2) kubectl/docker/$(1)/Dockerfile

swifty/$(1):
	$$(call msg-gen, $$@)
	$$(Q) $$(CP) swy$(2) kubectl/docker/$(1)/swy$(2)
	$$(Q) $$(MAKE) -C kubectl/docker/$(1) all

.PHONY: swifty/$(1)
endef

define gen-pack-service
S_IMAGES += swifty/$(1)
S_BINARIES += swy-$(1)

$(eval $(call gen-pack-service-n,$(1),-$(1)))
endef

#
# Core rules generation
#

SRVCS = gate admd s3
LANGS = python golang swift ruby nodejs csharp
TOOLS = ctl trace s3fsck sg dbscr dbscr-s3 runtest

# Each service has its swifty/$name docker image
$(foreach s,$(SRVCS),$(eval $(call gen-gobuild-daemon,$s)))
$(foreach s,$(SRVCS),$(eval $(call gen-pack-service,$s)))
# Each lang has its swifty/$lang docker image
$(foreach l,$(LANGS),$(eval $(call gen-lang,$l)))
# Each tool is swy$(name) thing
$(foreach t,$(TOOLS),$(eval $(call gen-gobuild-tool,$t)))
# Additionaly, swy-wdog can be built separately
$(eval $(call gen-gobuild-daemon,wdog))
# ... and packed into swifty/proxy image
$(eval $(call gen-pack-service-n,proxy,wdog))
# The swy-mongoproxy is a daemon for now, will move it to SRVCS soon
$(eval $(call gen-gobuild-daemon,mongoproxy))
# The swydbscr tools is packed into image too
$(eval $(call gen-pack-service-n,dbscr,dbscr))

# Default target
all: $(all-y)

images: $(IMAGES)
	@true

.PHONY: images

simages: $(S_IMAGES)
	@true

.PHONY: simages

services: $(S_BINARIES)
	@true

.PHONY: services

tools: $(TOOL_BINS)
	@true

.PHONY: tools

help:
	@echo '    Targets:'
	@echo '      images          - Build all wdog docker images'
	@echo '      simages         - Build add services images'
	@echo '      docs            - Build documentation'
	@echo '    Services ($(SRVCS)):'
	@echo '      swy-$$SRV        - Build $$SRV binary'
	@echo '      swifty/$$SRV     - Pack $$SRV image'
	@echo '    Tools:'
	@echo '      swyctl          - Build gate cli'
	@echo '      swytrace        - Build gate eq tracing tool'
	@echo '      swys3fsck       - Build s3 databaase integrity checker'
	@echo '      swysg           - Build secrets generator cli'
	@echo '      swydbscr        - Build DB scraper tool'
	@echo '      swydbscr-s3     - Build S3 DB scraper tool'
	@echo '      swyruntest      - Build runner tester tool'
	@echo '    Languages ($(LANGS)):'
	@echo '      swifty/$$LANG    - Build $$LANG docker image'
	@echo '    Random:'
	@echo '      swifty/dbscr    - Pack scraper into image'
	@echo '      swy-wdog        - Build wdog'
.PHONY: help

tags:
	$(Q) $(GOTAGS) -R src/ > tags
.PHONY: tags

#docs: .FORCE
#	$(Q) $(MAKE) -C docs/ html
#.PHONY: docs

tar:
	$(Q) $(GIT) archive --format=tar --prefix=swifty/ HEAD > swifty.tar
.PHONY: tar

gtar:
	$(Q) $(GIT) repack -ad
	$(Q) $(GIT) gc
	$(TAR) -c -C ../ -f ../swifty-git.tar --exclude 'vendor/*' $(shell basename $(CURDIR))
.PHONY: tar

ifneq ($(filter mqclean,$(MAKECMDGOALS)),)
rabbit-users := $(filter-out guest root, $(shell rabbitmqctl list_users | tail -n +2 | cut -f 1))
rabbit-vhosts := $(filter-out /, $(shell rabbitmqctl list_vhosts | tail -n +2 | cut -f 1))
endif

mqclean: .FORCE
	$(call msg-gen,"Cleaning up MessageQ")
ifneq ($(rabbit-users),)
	$(Q) rabbitmqctl delete_user $(rabbit-users)
endif
ifneq ($(rabbit-vhosts),)
	$(Q) rabbitmqctl delete_vhost $(rabbit-vhosts)
endif
.PHONY: mqclean

ifneq ($(filter sqlclean,$(MAKECMDGOALS)),)
mysql-user ?= "root"
mysql-pass ?= "aiNe1sah9ichu1re"
sql-users := $(filter-out root, \
	$(shell mysql -u$(mysql-user) -p$(mysql-pass) -N -e'select user from mysql.user' | cut -f1))
sql-dbases := $(filter-out information_schema mysql performance_schema test, \
	$(shell mysql -u$(mysql-user) -p$(mysql-pass) -N -e'show databases' | cut -f1))
endif

sqlclean: .FORCE
	$(call msg-gen,"Cleaning up SQL")
ifneq ($(sql-users),)
	$(foreach user,$(sql-users),$(shell mysql -u$(mysql-user) -p$(mysql-pass) -e'drop user $(user)'))
endif
ifneq ($(sql-dbases),)
	$(foreach db,$(sql-dbases),$(shell mysql -u$(mysql-user) -p$(mysql-pass) -e'drop database $(db)'))
endif
.PHONY: sqlclean

DB-SWIFTY	:= swifty
DB-S3		:= swifty-s3

deps:
	sh deps.sh

mgo-swifty-creds :=
ifneq ($(mgo-swifty-user),)
ifneq ($(mgo-swifty-pass),)
	mgo-swifty-creds := -u $(mgo-swifty-user) -p $(mgo-swifty-pass)
endif
endif

mgo-s3-creds :=
ifneq ($(mgo-s3-user),)
ifneq ($(mgo-s3-pass),)
	mgo-s3-creds := -u $(mgo-s3-user) -p $(mgo-s3-pass)
endif
endif

clean-db-swifty:
	$(call msg-gen,"Cleaning up main MongoDB")
	$(Q) $(MONGO)/$(DB-SWIFTY) $(mgo-swifty-creds) --eval 'db.Function.remove({});'
	$(Q) $(MONGO)/$(DB-SWIFTY) $(mgo-swifty-creds) --eval 'db.Mware.remove({});'
	$(Q) $(MONGO)/$(DB-SWIFTY) $(mgo-swifty-creds) --eval 'db.FnStats.remove({});'
	$(Q) $(MONGO)/$(DB-SWIFTY) $(mgo-swifty-creds) --eval 'db.Pods.remove({});'
	$(Q) $(MONGO)/$(DB-SWIFTY) $(mgo-swifty-creds) --eval 'db.Balancer.remove({});'
	$(Q) $(MONGO)/$(DB-SWIFTY) $(mgo-swifty-creds) --eval 'db.BalancerRS.remove({});'
	$(Q) $(MONGO)/$(DB-SWIFTY) $(mgo-swifty-creds) --eval 'db.Logs.remove({});'
.PHONY: clean-db-swifty

clean-db-s3:
	$(call msg-gen,"Cleaning up s3 MongoDB")
	$(Q) $(MONGO)/$(DB-S3) $(mgo-s3-creds) --eval 'db.S3Iams.remove({});'
	$(Q) $(MONGO)/$(DB-S3) $(mgo-s3-creds) --eval 'db.S3Buckets.remove({});'
	$(Q) $(MONGO)/$(DB-S3) $(mgo-s3-creds) --eval 'db.S3Objects.remove({});'
	$(Q) $(MONGO)/$(DB-S3) $(mgo-s3-creds) --eval 'db.S3Uploads.remove({});'
	$(Q) $(MONGO)/$(DB-S3) $(mgo-s3-creds) --eval 'db.S3ObjectData.remove({});'
	$(Q) $(MONGO)/$(DB-S3) $(mgo-s3-creds) --eval 'db.S3AccessKeys.remove({});'
.PHONY: clean-db-s3

rsclean: clean-db-swifty clean-db-s3
	$(call msg-gen,"Cleaning up kubernetes")
	$(Q) $(KUBECTL) delete deployment --all
	$(Q) $(KUBECTL) delete secret --all
	#$(Q) $(KUBECTL) delete service --all
	$(Q) $(KUBECTL) delete pod --all
	$(call msg-gen,"Cleaning up IPVS")
	$(Q) $(IPVSADM) -C
	$(call msg-gen,"Cleaning up FS")
ifneq ($(wildcard $(LOCAL_SOURCES)/.*),)
	$(Q) $(RM) -r $(LOCAL_SOURCES)/*
endif
ifneq ($(wildcard $(VOLUME_DIR)/.*),)
	$(Q) $(RM) -r $(VOLUME_DIR)/*
endif
ifneq ($(wildcard $(TEST_REPO)/.*),)
	$(Q) $(RM) -r $(TEST_REPO)/*
endif

clean:
	$(call msg-clean,swy-gate)
	$(Q) $(RM) swy-gate
	$(call msg-clean,swy-wdog)
	$(Q) $(RM) swy-wdog
	$(call msg-clean,swy-admd)
	$(Q) $(RM) swy-admd
	$(call msg-clean,swy-pgrest)
	$(Q) $(RM) swy-pgrest
	$(call msg-clean,swy-mquotad)
	$(Q) $(RM) swy-mquotad
	$(call msg-clean,swy-wdog)
	$(Q) $(RM) swy-wdog
	$(call msg-clean,swy-s3)
	$(Q) $(RM) swy-s3
	$(call msg-clean,swyctl)
	$(Q) $(RM) swyctl
	$(call msg-clean,swytrace)
	$(Q) $(RM) swytrace
	$(call msg-clean,swydbscr)
	$(Q) $(RM) swydbscr
	$(call msg-clean,swys3fsck)
	$(Q) $(RM) swys3fsck
	$(call msg-clean,swysg)
	$(Q) $(RM) swysg
#	$(Q) $(MAKE) -C docs clean
.PHONY: clean

mrproper: clean
	$(call msg-clean,tags)
	$(Q) $(RM) tags
.PHONY: mrproper

.SUFFIXES:
