swagger: '2.0'
info:
  version: 1.0.0
  title: admd api
host: 'localhost:8687'
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /login:
    post:
      summary: Sign-in request
      parameters:
        - in: body
          name: data
          description: Credentials
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        '200':
          description: OK
          headers:
            X-Subject-Token:
              type: string
              description: Auth token for further requests
          schema:
            $ref: '#/definitions/UserToken'
        '400':
          description: Something went wrong
        '401':
          description: Bad username/pass
  /users:
    parameters:
      - in: header
        name: X-Auth-Token
        type: string
        required: true
    get:
      summary: List users
      responses:
        '200':
          description: OK
          schema:
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/UserInfo'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
    post:
      summary: Add new user (admin or UI)
      parameters:
        - in: body
          name: data
          description: User description
          required: true
          schema:
            $ref: '#/definitions/UserAdd'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
  '/users/{uid}':
    parameters:
      - in: path
        name: uid
        type: string
        required: true
        description: 'User ID (id, not uid)'
      - in: header
        name: X-Auth-Token
        type: string
        required: true
    get:
      summary: Show user info by ID (admin or self)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserInfo'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
    delete:
      summary: Del existing user (admin or self)
      responses:
        '204':
          description: OK
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
  '/users/{uid}/pass':
    parameters:
      - in: path
        name: uid
        type: string
        required: true
        description: 'User ID (id, not uid)'
    put:
      summary: Set user password (admin or self)
      parameters:
        - in: header
          name: X-Auth-Token
          type: string
          required: true
        - in: body
          name: data
          description: User description (username is ignored)
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        '201':
          description: OK
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
  '/users/{uid}/limits':
    parameters:
      - in: path
        name: uid
        type: string
        required: true
        description: 'User ID (id, not uid)'
      - in: header
        name: X-Auth-Token
        type: string
        required: true
    put:
      summary: Set user plan parameters
      parameters:
        - in: body
          name: data
          description: User ID and parameters
          schema:
            $ref: '#/definitions/UserLimits'
      responses:
        '201':
          description: OK
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token (needs admin role)
    get:
      summary: Get user plan parameters
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/UserLimits'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token (needs admin role)
  /plans:
    parameters:
      - in: header
        name: X-Auth-Token
        type: string
        required: true
    get:
      summary: List tarif plans
      responses:
        '200':
          description: OK
          schema:
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/PlanLimits'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
    post:
      summary: Add new plan (admin only)
      parameters:
        - in: body
          name: data
          description: User description
          required: true
          schema:
            $ref: '#/definitions/PlanLimits'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/PlanLimits'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
  '/plans/{pid}':
    parameters:
      - in: path
        name: pid
        type: string
        required: true
        description: Plan ID
      - in: header
        name: X-Auth-Token
        type: string
        required: true
    get:
      summary: Show info about plan
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PlanLimits'
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
    delete:
      summary: Del existing plan (admin only)
      responses:
        '204':
          description: OK
        '401':
          description: Need to authenticate
        '403':
          description: Bad auth token
definitions:
  UserLogin:
    required:
      - password
    properties:
      username:
        type: string
        example: john@doe.com
      password:
        type: string
        example: secretpass123
  UserToken:
    properties:
      expires:
        type: string
        description: UnixDate time of Token expiration
      endpoint:
        type: string
        description: 'Gate address:port to talk to'
  UserInfo:
    properties:
      id:
        type: string
        example: 192a30bc93e2184dac03294f89840324
      uid:
        type: string
        example: john@doe.com
      name:
        type: string
        example: John Doe
      created:
        type: string
        description: Time of user creation (RFC1123Z format)
      roles:
        type: array
        items:
          type: string
  UserAdd:
    required:
      - uid
      - pass
    properties:
      uid:
        type: string
        example: john@doe.com
      pass:
        type: string
        example: pAs$w0rd
      name:
        type: string
        example: John Doe
      planid:
        type: string
        description: >-
          ID of a tariff plan. If set, user limits will be set creation-time
          into tariff values.
  UserLimits:
    properties:
      planid:
        type: string
        description: Tariff plan ID
      function:
        $ref: '#/definitions/FunctionLimits'
  PlanLimits:
    properties:
      id:
        type: string
        description: ID
      name:
        type: string
        description: Tariff plan description
      function:
        $ref: '#/definitions/FunctionLimits'
  FunctionLimits:
    description: Limits for functions invocations
    properties:
      rate:
        type: integer
        description: max calls per second
      burst:
        type: integer
        description: rate-limiter burst value
      maxinproj:
        type: integer
        description: maximum number of functions in a single project
      gbs:
        type: integer
        description: maximum GBS value per billing period
      bytesout:
        type: integer
        description: maximum bytes-out (outgoing network traffic) value per billing period
