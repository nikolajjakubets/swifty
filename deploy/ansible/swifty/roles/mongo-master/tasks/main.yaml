---
- name: install mongodb
  dnf:
    name: '{{ item }}'
    state: present
  with_items:
    - mongodb-server
    - mongo-tools
    - mongodb

- name: enable mongod
  service: name=mongod state=started enabled=yes

- name: check config
  shell: mongo --quiet localhost:27017 --eval 'db.getMongo().getDBNames().indexOf("{{ mgo_master_db_name }}")'
  register: db_name_result
  ignore_errors: True

- name: configure mongod
  lineinfile:
    path: /etc/mongod.conf
    insertafter: '{{ item.after }}'
    regexp: '{{ item.re }}'
    line: '{{ item.val }}'
    backup: yes
  with_items:
    - { after: "^net:", re: "  bindIp", val: "  #bindIp: 127.0.0.1,::1" }
    - { after: "", re: "^#security:", val: "security:" }
    - { after: "^security:", re: "  #authorization", val: "  authorization: 'enabled'" }
  when: mongod_result.stdout == "null"

- name: create admin
  shell: |
    mongo --quiet localhost:27017/{{ mgo_master_db_name }} --eval 'db.createUser({user:"{{ mgo_master_db_user }}", pwd:"{{ mgo_master_db_pass }}", roles:[{role:"dbOwner",db:"{{ mgo_master_db_name }}"}]});'
  when: db_name_result.stdout == "-1"

- name: create collections
  shell: mongo --quiet localhost:27017/{{ mgo_master_db_name }} --eval 'db.createCollection("{{ item }}");'
  with_items:
    - "Function"
    - "Mware"
    - "Logs"
    - "FnStats"
    - "Balancer"
    - "BalancerRS"
  when: db_name_result.stdout == "-1"
